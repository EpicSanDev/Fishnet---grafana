version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus-distributed.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - monitoring

  # Serveur central de métriques Fishnet
  fishnet-stats-server:
    build:
      context: ./fishnet-exporter
    container_name: fishnet-stats-server
    ports:
      - "9101:9101"
    volumes:
      - ./config/stats_server_config.yaml:/app/config/fishnet_config.yaml
    restart: unless-stopped
    networks:
      - monitoring
    command: ["python", "fishnet_exporter_modified.py"]

  # Exemple d'un serveur Fishnet client qui envoie ses métriques au serveur central
  # Vous pouvez avoir plusieurs instances comme celle-ci
  fishnet-client-1:
    build:
      context: ./fishnet-exporter
    container_name: fishnet-client-1
    volumes:
      - ./config/client1_config.yaml:/app/config/fishnet_config.yaml
    restart: unless-stopped
    networks:
      - monitoring
    command: ["python", "fishnet_exporter_modified.py"]
    depends_on:
      - fishnet-stats-server

  # Exemple d'un deuxième client
  fishnet-client-2:
    build:
      context: ./fishnet-exporter
    container_name: fishnet-client-2
    volumes:
      - ./config/client2_config.yaml:/app/config/fishnet_config.yaml
    restart: unless-stopped
    networks:
      - monitoring
    command: ["python", "fishnet_exporter_modified.py"]
    depends_on:
      - fishnet-stats-server

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
